// source: akari_proto/m5stack.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.akari_proto.Color', null, global);
goog.exportSymbol('proto.akari_proto.M5StackStatus', null, global);
goog.exportSymbol('proto.akari_proto.ResetPinOutRequest', null, global);
goog.exportSymbol('proto.akari_proto.SetDisplayColorRequest', null, global);
goog.exportSymbol('proto.akari_proto.SetDisplayImageRequest', null, global);
goog.exportSymbol('proto.akari_proto.SetDisplayTextRequest', null, global);
goog.exportSymbol('proto.akari_proto.SetPinOutRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akari_proto.SetPinOutRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akari_proto.SetPinOutRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akari_proto.SetPinOutRequest.displayName = 'proto.akari_proto.SetPinOutRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akari_proto.ResetPinOutRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akari_proto.ResetPinOutRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akari_proto.ResetPinOutRequest.displayName = 'proto.akari_proto.ResetPinOutRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akari_proto.SetDisplayColorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akari_proto.SetDisplayColorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akari_proto.SetDisplayColorRequest.displayName = 'proto.akari_proto.SetDisplayColorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akari_proto.SetDisplayTextRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akari_proto.SetDisplayTextRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akari_proto.SetDisplayTextRequest.displayName = 'proto.akari_proto.SetDisplayTextRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akari_proto.SetDisplayImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akari_proto.SetDisplayImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akari_proto.SetDisplayImageRequest.displayName = 'proto.akari_proto.SetDisplayImageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akari_proto.Color = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akari_proto.Color, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akari_proto.Color.displayName = 'proto.akari_proto.Color';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akari_proto.M5StackStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akari_proto.M5StackStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akari_proto.M5StackStatus.displayName = 'proto.akari_proto.M5StackStatus';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akari_proto.SetPinOutRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.akari_proto.SetPinOutRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akari_proto.SetPinOutRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akari_proto.SetPinOutRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    binaryPinsMap: (f = msg.getBinaryPinsMap()) ? f.toObject(includeInstance, undefined) : [],
    intPinsMap: (f = msg.getIntPinsMap()) ? f.toObject(includeInstance, undefined) : [],
    sync: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akari_proto.SetPinOutRequest}
 */
proto.akari_proto.SetPinOutRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akari_proto.SetPinOutRequest;
  return proto.akari_proto.SetPinOutRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akari_proto.SetPinOutRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akari_proto.SetPinOutRequest}
 */
proto.akari_proto.SetPinOutRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getBinaryPinsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "", false);
         });
      break;
    case 2:
      var value = msg.getIntPinsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSync(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akari_proto.SetPinOutRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akari_proto.SetPinOutRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akari_proto.SetPinOutRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akari_proto.SetPinOutRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBinaryPinsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getIntPinsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getSync();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * map<string, bool> binary_pins = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.akari_proto.SetPinOutRequest.prototype.getBinaryPinsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.akari_proto.SetPinOutRequest} returns this
 */
proto.akari_proto.SetPinOutRequest.prototype.clearBinaryPinsMap = function() {
  this.getBinaryPinsMap().clear();
  return this;};


/**
 * map<string, int32> int_pins = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.akari_proto.SetPinOutRequest.prototype.getIntPinsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.akari_proto.SetPinOutRequest} returns this
 */
proto.akari_proto.SetPinOutRequest.prototype.clearIntPinsMap = function() {
  this.getIntPinsMap().clear();
  return this;};


/**
 * optional bool sync = 3;
 * @return {boolean}
 */
proto.akari_proto.SetPinOutRequest.prototype.getSync = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.akari_proto.SetPinOutRequest} returns this
 */
proto.akari_proto.SetPinOutRequest.prototype.setSync = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akari_proto.ResetPinOutRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.akari_proto.ResetPinOutRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akari_proto.ResetPinOutRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akari_proto.ResetPinOutRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sync: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akari_proto.ResetPinOutRequest}
 */
proto.akari_proto.ResetPinOutRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akari_proto.ResetPinOutRequest;
  return proto.akari_proto.ResetPinOutRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akari_proto.ResetPinOutRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akari_proto.ResetPinOutRequest}
 */
proto.akari_proto.ResetPinOutRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSync(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akari_proto.ResetPinOutRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akari_proto.ResetPinOutRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akari_proto.ResetPinOutRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akari_proto.ResetPinOutRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSync();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool sync = 1;
 * @return {boolean}
 */
proto.akari_proto.ResetPinOutRequest.prototype.getSync = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.akari_proto.ResetPinOutRequest} returns this
 */
proto.akari_proto.ResetPinOutRequest.prototype.setSync = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akari_proto.SetDisplayColorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.akari_proto.SetDisplayColorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akari_proto.SetDisplayColorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akari_proto.SetDisplayColorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    color: (f = msg.getColor()) && proto.akari_proto.Color.toObject(includeInstance, f),
    sync: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akari_proto.SetDisplayColorRequest}
 */
proto.akari_proto.SetDisplayColorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akari_proto.SetDisplayColorRequest;
  return proto.akari_proto.SetDisplayColorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akari_proto.SetDisplayColorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akari_proto.SetDisplayColorRequest}
 */
proto.akari_proto.SetDisplayColorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.akari_proto.Color;
      reader.readMessage(value,proto.akari_proto.Color.deserializeBinaryFromReader);
      msg.setColor(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSync(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akari_proto.SetDisplayColorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akari_proto.SetDisplayColorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akari_proto.SetDisplayColorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akari_proto.SetDisplayColorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.akari_proto.Color.serializeBinaryToWriter
    );
  }
  f = message.getSync();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional Color color = 1;
 * @return {?proto.akari_proto.Color}
 */
proto.akari_proto.SetDisplayColorRequest.prototype.getColor = function() {
  return /** @type{?proto.akari_proto.Color} */ (
    jspb.Message.getWrapperField(this, proto.akari_proto.Color, 1));
};


/**
 * @param {?proto.akari_proto.Color|undefined} value
 * @return {!proto.akari_proto.SetDisplayColorRequest} returns this
*/
proto.akari_proto.SetDisplayColorRequest.prototype.setColor = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akari_proto.SetDisplayColorRequest} returns this
 */
proto.akari_proto.SetDisplayColorRequest.prototype.clearColor = function() {
  return this.setColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akari_proto.SetDisplayColorRequest.prototype.hasColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool sync = 2;
 * @return {boolean}
 */
proto.akari_proto.SetDisplayColorRequest.prototype.getSync = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.akari_proto.SetDisplayColorRequest} returns this
 */
proto.akari_proto.SetDisplayColorRequest.prototype.setSync = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akari_proto.SetDisplayTextRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.akari_proto.SetDisplayTextRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akari_proto.SetDisplayTextRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akari_proto.SetDisplayTextRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    posX: jspb.Message.getFieldWithDefault(msg, 2, 0),
    posY: jspb.Message.getFieldWithDefault(msg, 3, 0),
    size: jspb.Message.getFieldWithDefault(msg, 4, 0),
    textColor: (f = msg.getTextColor()) && proto.akari_proto.Color.toObject(includeInstance, f),
    bgColor: (f = msg.getBgColor()) && proto.akari_proto.Color.toObject(includeInstance, f),
    refresh: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    sync: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akari_proto.SetDisplayTextRequest}
 */
proto.akari_proto.SetDisplayTextRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akari_proto.SetDisplayTextRequest;
  return proto.akari_proto.SetDisplayTextRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akari_proto.SetDisplayTextRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akari_proto.SetDisplayTextRequest}
 */
proto.akari_proto.SetDisplayTextRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 5:
      var value = new proto.akari_proto.Color;
      reader.readMessage(value,proto.akari_proto.Color.deserializeBinaryFromReader);
      msg.setTextColor(value);
      break;
    case 6:
      var value = new proto.akari_proto.Color;
      reader.readMessage(value,proto.akari_proto.Color.deserializeBinaryFromReader);
      msg.setBgColor(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRefresh(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSync(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akari_proto.SetDisplayTextRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akari_proto.SetDisplayTextRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akari_proto.SetDisplayTextRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akari_proto.SetDisplayTextRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPosX();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPosY();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTextColor();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.akari_proto.Color.serializeBinaryToWriter
    );
  }
  f = message.getBgColor();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.akari_proto.Color.serializeBinaryToWriter
    );
  }
  f = message.getRefresh();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSync();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.akari_proto.SetDisplayTextRequest.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akari_proto.SetDisplayTextRequest} returns this
 */
proto.akari_proto.SetDisplayTextRequest.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 pos_x = 2;
 * @return {number}
 */
proto.akari_proto.SetDisplayTextRequest.prototype.getPosX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.akari_proto.SetDisplayTextRequest} returns this
 */
proto.akari_proto.SetDisplayTextRequest.prototype.setPosX = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 pos_y = 3;
 * @return {number}
 */
proto.akari_proto.SetDisplayTextRequest.prototype.getPosY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.akari_proto.SetDisplayTextRequest} returns this
 */
proto.akari_proto.SetDisplayTextRequest.prototype.setPosY = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 size = 4;
 * @return {number}
 */
proto.akari_proto.SetDisplayTextRequest.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.akari_proto.SetDisplayTextRequest} returns this
 */
proto.akari_proto.SetDisplayTextRequest.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Color text_color = 5;
 * @return {?proto.akari_proto.Color}
 */
proto.akari_proto.SetDisplayTextRequest.prototype.getTextColor = function() {
  return /** @type{?proto.akari_proto.Color} */ (
    jspb.Message.getWrapperField(this, proto.akari_proto.Color, 5));
};


/**
 * @param {?proto.akari_proto.Color|undefined} value
 * @return {!proto.akari_proto.SetDisplayTextRequest} returns this
*/
proto.akari_proto.SetDisplayTextRequest.prototype.setTextColor = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akari_proto.SetDisplayTextRequest} returns this
 */
proto.akari_proto.SetDisplayTextRequest.prototype.clearTextColor = function() {
  return this.setTextColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akari_proto.SetDisplayTextRequest.prototype.hasTextColor = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Color bg_color = 6;
 * @return {?proto.akari_proto.Color}
 */
proto.akari_proto.SetDisplayTextRequest.prototype.getBgColor = function() {
  return /** @type{?proto.akari_proto.Color} */ (
    jspb.Message.getWrapperField(this, proto.akari_proto.Color, 6));
};


/**
 * @param {?proto.akari_proto.Color|undefined} value
 * @return {!proto.akari_proto.SetDisplayTextRequest} returns this
*/
proto.akari_proto.SetDisplayTextRequest.prototype.setBgColor = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.akari_proto.SetDisplayTextRequest} returns this
 */
proto.akari_proto.SetDisplayTextRequest.prototype.clearBgColor = function() {
  return this.setBgColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.akari_proto.SetDisplayTextRequest.prototype.hasBgColor = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool refresh = 7;
 * @return {boolean}
 */
proto.akari_proto.SetDisplayTextRequest.prototype.getRefresh = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.akari_proto.SetDisplayTextRequest} returns this
 */
proto.akari_proto.SetDisplayTextRequest.prototype.setRefresh = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool sync = 8;
 * @return {boolean}
 */
proto.akari_proto.SetDisplayTextRequest.prototype.getSync = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.akari_proto.SetDisplayTextRequest} returns this
 */
proto.akari_proto.SetDisplayTextRequest.prototype.setSync = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akari_proto.SetDisplayImageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.akari_proto.SetDisplayImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akari_proto.SetDisplayImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akari_proto.SetDisplayImageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    posX: jspb.Message.getFieldWithDefault(msg, 2, 0),
    posY: jspb.Message.getFieldWithDefault(msg, 3, 0),
    scale: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    sync: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akari_proto.SetDisplayImageRequest}
 */
proto.akari_proto.SetDisplayImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akari_proto.SetDisplayImageRequest;
  return proto.akari_proto.SetDisplayImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akari_proto.SetDisplayImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akari_proto.SetDisplayImageRequest}
 */
proto.akari_proto.SetDisplayImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSync(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akari_proto.SetDisplayImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akari_proto.SetDisplayImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akari_proto.SetDisplayImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akari_proto.SetDisplayImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPosX();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPosY();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getScale();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getSync();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.akari_proto.SetDisplayImageRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akari_proto.SetDisplayImageRequest} returns this
 */
proto.akari_proto.SetDisplayImageRequest.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 pos_x = 2;
 * @return {number}
 */
proto.akari_proto.SetDisplayImageRequest.prototype.getPosX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.akari_proto.SetDisplayImageRequest} returns this
 */
proto.akari_proto.SetDisplayImageRequest.prototype.setPosX = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 pos_y = 3;
 * @return {number}
 */
proto.akari_proto.SetDisplayImageRequest.prototype.getPosY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.akari_proto.SetDisplayImageRequest} returns this
 */
proto.akari_proto.SetDisplayImageRequest.prototype.setPosY = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float scale = 4;
 * @return {number}
 */
proto.akari_proto.SetDisplayImageRequest.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.akari_proto.SetDisplayImageRequest} returns this
 */
proto.akari_proto.SetDisplayImageRequest.prototype.setScale = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional bool sync = 5;
 * @return {boolean}
 */
proto.akari_proto.SetDisplayImageRequest.prototype.getSync = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.akari_proto.SetDisplayImageRequest} returns this
 */
proto.akari_proto.SetDisplayImageRequest.prototype.setSync = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akari_proto.Color.prototype.toObject = function(opt_includeInstance) {
  return proto.akari_proto.Color.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akari_proto.Color} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akari_proto.Color.toObject = function(includeInstance, msg) {
  var f, obj = {
    red: jspb.Message.getFieldWithDefault(msg, 1, 0),
    green: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blue: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akari_proto.Color}
 */
proto.akari_proto.Color.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akari_proto.Color;
  return proto.akari_proto.Color.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akari_proto.Color} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akari_proto.Color}
 */
proto.akari_proto.Color.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGreen(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akari_proto.Color.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akari_proto.Color.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akari_proto.Color} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akari_proto.Color.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRed();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGreen();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getBlue();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 red = 1;
 * @return {number}
 */
proto.akari_proto.Color.prototype.getRed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.akari_proto.Color} returns this
 */
proto.akari_proto.Color.prototype.setRed = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 green = 2;
 * @return {number}
 */
proto.akari_proto.Color.prototype.getGreen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.akari_proto.Color} returns this
 */
proto.akari_proto.Color.prototype.setGreen = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 blue = 3;
 * @return {number}
 */
proto.akari_proto.Color.prototype.getBlue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.akari_proto.Color} returns this
 */
proto.akari_proto.Color.prototype.setBlue = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akari_proto.M5StackStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.akari_proto.M5StackStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akari_proto.M5StackStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akari_proto.M5StackStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusJson: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akari_proto.M5StackStatus}
 */
proto.akari_proto.M5StackStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akari_proto.M5StackStatus;
  return proto.akari_proto.M5StackStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akari_proto.M5StackStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akari_proto.M5StackStatus}
 */
proto.akari_proto.M5StackStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusJson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akari_proto.M5StackStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akari_proto.M5StackStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akari_proto.M5StackStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akari_proto.M5StackStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusJson();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string status_json = 1;
 * @return {string}
 */
proto.akari_proto.M5StackStatus.prototype.getStatusJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akari_proto.M5StackStatus} returns this
 */
proto.akari_proto.M5StackStatus.prototype.setStatusJson = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.akari_proto);
